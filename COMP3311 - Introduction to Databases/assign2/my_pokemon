#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: Joel Dean z5208947
Written on: 05/04/2023

My Pokemon

Create your very own Pokemon
"""


import sys
import psycopg2
import helpers
from random import Random


### Constants
USAGE = f"Usage: {sys.argv[0]} <Seed>"


### Globals
db = None
Seed = None
rng = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
Seed = int(sys.argv[1]) # read the seed from the command line
rng  = Random(Seed)     # set the seed for the python random number generator

# `rng` is a python Random number generator
# `rng.random()` returns a random float between 0 and 1
# `rng.randint(a, b)` returns a random integer between a and b (inclusive)

# `SELECT setseed(seed);` sets the postgres random seed to `seed`
# `SELECT * FROM Table ORDER BY random() LIMIT 5;` gives 5 random rows from the table `Table`
# `SELECT setseed(seed);` should be used once, before any calls to random(), with the a random number generated by `rng.random()`

def menu(items: list[str]) -> int:
    """
    Given a list of strings,
    print a numbered menu
    and return the user's selection.
    """
    padding = len(str(len(items)))
    print(f"Select an option from the menu below by entering its number:")
    for i, item in enumerate(items):
        print(f"{i+1:{padding}}) {item}")
    ret = int(input("> Selection: ")) - 1
    if not sys.stdin.isatty():
        print(f"{ret+1}")
    print()
    return ret

# Task:
# Command Line: ./my_pokemon _seed_
#   -> Seed is for a random number generator
# 1. Ask User to select pokemon game (E.g. Diamond)
#       a. 10 options (Randomly selected from games table)
# 2. Ask User to select ability
#       b. From all abilities
#       c. Ordered by Ability.id
# 3. Ask user to select moves
#       a. Select 4
#       b. From list of moves (order by move.id)
#       c. After first selection do not show the same move for the second selection
#       d. Moves must be in the selected game

def main():
    dbCursor = db.cursor()
    dbCursor.execute("SELECT setseed(%s)", [rng.random()])

    # ----- Choose Game -------

    dbCursor.execute('''
        SELECT Name
        FROM Games
        ORDER BY random()
        LIMIT 10
    ''')

    gameOptions = []
    for game in dbCursor.fetchall():
        gameOptions.append(game[0])

    pokemonGame = menu(gameOptions)
    chosenGame = gameOptions[pokemonGame]

    # ----- Choose Pokemon -------
    dbCursor.execute('''
        SELECT Pokemon.Name
        FROM Pokemon
        JOIN Pokedex ON Pokedex.National_ID = Pokemon.ID
        JOIN Games ON Games.ID = Pokedex.Game
        WHERE Games.Name = %s
        ORDER BY random()
        LIMIT 10
    ''', [chosenGame])

    pokemonOptions = []
    for pokemon in dbCursor.fetchall():
        pokemonOptions.append(pokemon[0])

    arrayPosition = menu(pokemonOptions)
    chosenPokemon = pokemonOptions[arrayPosition]

    # ----- Choose Pokemon Abilities -------
    dbCursor.execute('''
        SELECT Abilities.Name
        FROM Abilities
        JOIN Knowable_Abilities AS KA ON KA.Knows = Abilities.ID
        JOIN Pokemon ON Pokemon.ID = KA.Known_By  
        WHERE Pokemon.Name = %s
        ORDER BY Abilities.ID
    ''', [chosenPokemon])

    abilityOptions = []
    for ability in dbCursor.fetchall():
        abilityOptions.append(ability[0])

    if len(abilityOptions) != 0: 
        abilityPosition = menu(abilityOptions)
        chosenAbility = abilityOptions[abilityPosition]
    else:
        chosenAbility = None

    # ----- Choose Pokemon Moves -------
    dbCursor.execute('''
        SELECT DISTINCT Moves.Name, Moves.ID
        FROM Moves
        JOIN Learnable_Moves AS LM ON LM.Learns = Moves.ID
        JOIN Pokemon ON Pokemon.ID = LM.Learnt_By 
        JOIN Requirements ON Requirements.ID = LM.Learnt_When
        JOIN Games ON Games.ID = LM.Learnt_In
        WHERE Requirements.Assertion LIKE 'Level:%%' 
        AND Pokemon.Name = %s
        AND Games.Name = %s
        ORDER BY Moves.ID
    ''', [chosenPokemon, chosenGame])

    moveOptions = []
    for move in dbCursor.fetchall():
        moveOptions.append(move[0])

    chosenMoves = []
    counter = 0
    while len(moveOptions) > 0 and counter != 4:
        movePosition = menu(moveOptions)
        chosenMoves.append(moveOptions[movePosition])
        moveOptions.remove(moveOptions[movePosition])
        counter += 1

    # # For Testing
    # print(f"Chosen Game: {chosenGame}")
    # print(f"Chosen Pokemon: {chosenPokemon}")
    # print(f"Chosen Ability: {chosenAbility}")
    # print(f"Chosen Moves: {chosenMoves}")

    # ---- Print Pokemon Information ----

    # Query Species + Regional_ID + First_Type
    dbCursor.execute('''
        SELECT Pokemon.Species, Pokedex.Regional_ID, T1.Name
        FROM Pokemon
        JOIN Types AS T1 ON T1.ID = Pokemon.First_Type
        JOIN Pokedex ON Pokedex.National_ID = Pokemon.ID
        JOIN Games ON Games.ID = Pokedex.Game
        WHERE Pokemon.Name = %s AND Games.Name = %s
    ''', [chosenPokemon, chosenGame])

    species, regionalID, firstType = dbCursor.fetchone()

    # Query: National_ID
    dbCursor.execute('''
        SELECT (National_ID).Pokedex_Number
        FROM Pokemon
        JOIN Pokedex ON Pokedex.National_ID = Pokemon.ID
        JOIN Games ON Games.ID = Pokedex.Game
        WHERE Pokemon.Name = %s AND Games.Name = %s
    ''', [chosenPokemon, chosenGame])

    nationalID = dbCursor.fetchone()

    # Query: Second_Type
    dbCursor.execute('''
        SELECT T2.Name
        FROM Pokemon
        JOIN Types AS T2 ON T2.ID = Pokemon.Second_Type
        JOIN Pokedex ON Pokedex.National_ID = Pokemon.ID
        JOIN Games ON Games.ID = Pokedex.Game
        WHERE Pokemon.Name = %s AND Games.Name = %s
    ''', [chosenPokemon, chosenGame])
    
    secondType = dbCursor.fetchone()

    print(f"Here is your new Pokemon (from Pokemon {chosenGame}):\n")
    print(f"Name: {chosenPokemon}")
    print(f"Species: {species}")
    if secondType != None:
        print(f"Type: {firstType} + {secondType[0]}")
    else:
        print(f"Type: {firstType}")
    print(f"Pokedex Number: {regionalID} ({nationalID[0]})")

    print(f"\nAbility: {chosenAbility}")
    print(f"\nMoves:")

    for move in chosenMoves:
        dbCursor.execute('''
            SELECT Types.Name, Moves.Category, Moves.POWER, Moves.Accuracy
            FROM Moves
            JOIN Types ON Types.ID = Moves.Of_Type
            WHERE Moves.Name = %s
        ''', [move])
        moveType, category, power, accuracy = dbCursor.fetchone()
        print(f"\t{move:<15}", end='')
        print(f"[{moveType}{']':<10}", end = '')
        print(f"(Category: {category}, Power: {power}, Accuracy: {accuracy})")  
    return


if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
